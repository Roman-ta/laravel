<?php

namespace App\Telegram;

use App\Models\WeatherSubscriptionModel;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use GuzzleHttp\Client;
use Illuminate\Support\Stringable;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Keyboard\Button;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

/**
 * class Handle
 */
class Handle extends WebhookHandler
{
    private string|null $botToken;
    private Weather $weather;
    private Currency $currency;
    private WeatherSubs $weatherSubs;
    private CurrencySubs $currencySubs;
    private Client $client;

    public function __construct()
    {
        parent::__construct();
        $this->botToken = env('BOT_TOKEN', '');
        $this->weather = new Weather();
        $this->currency = new Currency();
        $this->weatherSubs = new WeatherSubs();
        $this->client = new Client();
        $this->currencySubs = new CurrencySubs();
    }

    public function start(): void
    {
        try {
            $chatInfo = $this->chat->info();
            $customerName = $chatInfo['first_name'];

            Telegraph::bot($this->botToken)->chat($this->chat->chat_id)
                ->message("üå§ –ü—Ä–∏–≤–µ—Ç! *{$customerName}* –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç! —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
                ->keyboard(Keyboard::make()->row([
                    Button::make('–ü–æ–≥–æ–¥–∞')->action('weather')->param('weather', 1),
                    Button::make('–ö—É—Ä—Å –≤–∞–ª—é—Ç')->action('currency')->param('step', 1),
                ]))->send();

        } catch (\Exception $e) {
            Log::error('Error while sending message: ' . $e->getMessage());
        }
    }

    /**
     * @param Stringable $message
     * @return void
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    protected function handleChatMessage(Stringable $message): void
    {
        $cache = \App\Models\Cache::orderBy('expiration', 'desc')->first();


        if (str_contains($cache->key, 'exchange')) {
            $dataFromCurrency = Cache::get("exchange-{$this->chat->chat_id}");

            if (!is_numeric($message->value())) {
                $this->reply("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ *—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ* –¥–ª—è —Å—É–º–º—ã –æ–±–º–µ–Ω–∞.");
                return;
            }
            $result = $this->currency->getActualCurrencyFromBank();
            $response = '';
            foreach ($result as $item) {
                if (in_array($dataFromCurrency['from'], $item) && in_array($dataFromCurrency['to'], $item)) {
                    if ($item['from'] == $dataFromCurrency['from']) {
                        $response = $message->value() * $item['buy'];
                    }
                    if ($item['to'] == $dataFromCurrency['from']) {
                        $value = str_replace(',', '', $message->value());
                        $response = round($value / $item['sell'], 2);
                    }
                }
            }

            $this->reply("üí± *{$message->value()} {$dataFromCurrency['from']}* ‚âà *{$response} {$dataFromCurrency['to']}*");

        } else if (str_contains($cache->key, 'weather_subs')) {
            $city = (mb_strtolower($message->value()) === '—Ç–∏—Ä–∞—Å–ø–æ–ª—å') ? 'Tiraspol' : $message->value();

            $weatherData = $this->weather->getDefaultWeatherResult($city);

            if ($weatherData == null) {
                $this->reply("üåß –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ *{$message->value()}*. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑.");
                return;
            }

            $this->weatherSubs->start($this->chat, $city);
        } else {
            try {
                $weatherData = $this->weather->getDefaultWeatherResult($message->value());

                if ($weatherData == null) {
                    $this->reply("üåç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");
                    return;
                }

                Telegraph::bot($this->botToken)->chat($this->chat->chat_id)
                    ->message("üìç –ì–æ—Ä–æ–¥ *{$message->value()}* –Ω–∞–π–¥–µ–Ω!\n\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?\n‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ *—Å–µ–≥–æ–¥–Ω—è*\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ *5 –¥–Ω–µ–π*\n\nüëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
                    ->keyboard(Keyboard::make()->row([
                        Button::make('‚òÄÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è')->action('getWeather')->param('city', $message->value())->param('api', 'weather'),
                        Button::make('üìÖ –ù–∞ 5 –¥–Ω–µ–π')->action('getWeather')->param('city', $message->value())->param('api', 'forecast')
                    ]))->send();

            } catch (\Exception $e) {
                Log::error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≥–æ–¥—ã: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
                $this->reply("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —É–∫–∞–∂–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.");
            }
        }
    }

    /**
     * @return void
     */
    public function currency(): void
    {
        $step = $this->data->get('step') ?? 1;
        $from = $this->data->get('from') ?? '';
        $to = $this->data->get('to') ?? '';
        switch ($step) {
            case 1:
                $this->currency->getCurrency($this->chat);
                break;
            case 2:
                $this->currency->exchange($this->chat, $from);
                break;
            case 3:
                $this->currency->exchangeTo($this->chat, $from, $to);
                break;
        }
    }

    /**
     * @return void
     */
    public function currency_subs(): void
    {
        $step = $this->data->get('step') ?? 1;
        $hour = $this->data->get('hour') ?? 0;
        $minute = $this->data->get('minute') ?? 0;
        switch ($step) {
            case 1:
                $this->currencySubs->start($this->chat);
                break;
            case 2:
                $this->currencySubs->setMinutes($this->chat, $hour);
                break;
            case 3:
                $this->currencySubs->timeConfirm($this->chat, $hour, $minute);
                break;
            case 4:
                $this->currencySubs->finish($this->chat, $hour, $minute);
                break;
        }

    }

    /**
     * @return void
     */
    public function weather(): void
    {
        Cache::put("weather-{$this->chat->chat_id}", [
            'controller' => 'weather'
        ], now()->addMinutes(10));
        Telegraph::chat($this->chat->chat_id)->message("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–∏—à–∏ –≥–æ—Ä–æ–¥")->send();
    }

    /**
     * @return void
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function getWeather(): void
    {
        $this->weather->getWeathers($this->chat, $this->data->get('city'), $this->data->get('api'));
    }

    /**
     * @return void
     */
    public function weather_subs(): void
    {
        try {
            $chatInfo = $this->chat->info();
            Cache::put('weather_subs-' . $this->chat->chat_id, [
                'idCustomer' => $chatInfo['id'],
                'name' => $chatInfo['first_name'],
            ], now()->addMinute(10));

            $activeSubscription = WeatherSubscriptionModel::where('chat_id', $this->chat->chat_id)->first();

            if (!$activeSubscription) {
                Telegraph::chat($this->chat->chat_id)
                    ->message("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ *–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã* –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è! üå§Ô∏è\n\nüìç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –∏ –º—ã –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–º!")
                    ->send();
            } else {
                Telegraph::chat($this->chat->chat_id)
                    ->message("‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç, *{$activeSubscription['name']}*! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ üì®\n\nüìç –ì–æ—Ä–æ–¥: *{$activeSubscription['city']}*\nüïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{$activeSubscription['hour']}:{$activeSubscription['minute']}*\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ *–Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥*, –∏ —è –≤—Å—ë –æ–±–Ω–æ–≤–ª—é!")
                    ->send();
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
        }
    }


    public function subWeather(): void
    {
        $step = $this->data->get('step') ?? 0;
        $hour = $this->data->get('hour') ?? 0;
        $minute = $this->data->get('minute') ?? 0;
        $city = $this->data->get('city') ?? '';
        switch ((string)$step) {
            case '1':
                $this->weatherSubs->start($this->chat, $city);
                break;
            case '2':
                $this->weatherSubs->getHour($this->chat, $hour, $city);
                break;
            case '3':
                $this->weatherSubs->getMinute($this->chat, $hour, $minute, $city);
                break;
            case '4':
                $this->weatherSubs->finish($this->chat, $hour, $minute, $city);
                break;
        }
    }

    public function help(): void
    {
        $helpText = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n\n";
        $helpText .= "*–ü–æ–≥–æ–¥–∞:*\n";
        $helpText .= "1. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n";
        $helpText .= "2. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π.\n\n";
        $helpText .= "*–ö—É—Ä—Å –≤–∞–ª—é—Ç:*\n";
        $helpText .= "1. –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç.\n";
        $helpText .= "2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±–º–µ–Ω –≤–∞–ª—é—Ç.\n\n";
        $helpText .= "*–ü–æ–¥–ø–∏—Å–∫–∏:* \n";
        $helpText .= "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n";
        $helpText .= "2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.\n\n";
        $helpText .= "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!";

        $this->reply($helpText);
    }


    public function handleUnknownCommand(Stringable $text): void
    {
        if ($text->value() !== '/start' || $text->value() !== '/help') {
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }

    public function ai()
    {
        $question = "–ö—É—Ä—Å –≤–∞–ª—é—Ç –ø–º—Ä";

        try {
            $response = $this->client->post('https://openrouter.ai/api/v1/chat/completions', [
                'headers' => [
                    'Authorization' => 'Bearer ' . env('OPENROUTER_API_KEY'),
                    'Content-Type' => 'application/json',
                    'HTTP-Referer' => 'https://yourdomain.com', // –º–æ–∂–Ω–æ —Å–≤–æ–π —Å–∞–π—Ç
                    'X-Title' => 'My Telegram Bot'
                ],
                'json' => [
                    'model' => 'openai/gpt-3.5-turbo', // –∏–ª–∏ –¥—Ä—É–≥–∏–µ: mistral, anthropic/claude-3-opus
                    'messages' => [
                        ['role' => 'user', 'content' => $question]
                    ]
                ]
            ]);

            $body = json_decode($response->getBody(), true);
            $reply = $body['choices'][0]['message']['content'] ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT üòû';

            Telegraph::chat($this->chat->chat_id)->message($reply)->send();

        } catch (\Exception $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: ' . $e->getMessage());
            $this->reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
        }
    }
}
