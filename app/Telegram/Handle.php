<?php

namespace App\Telegram;

use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\ReplyButton;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Support\Stringable;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Keyboard\Button;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;

/**
 * class Handle
 */
class Handle extends WebhookHandler
{

    private string|null $botToken;

    private Weather $weather;
    private Currency $currency;

    private $currencyArray;

    public function __construct()
    {
        $this->botToken = env('BOT_TOKEN', '');
        $this->weather = new Weather();
        $this->currency = new Currency();
    }

    /**
     * @return void
     */
    public function start(): void
    {
        $nameUser = $this->message ? $this->message->from()->firstName() : ($this->data ? $this->data->get('name') : '');
        try {
            Telegraph::bot($this->botToken)->chat($this->chat->chat_id)
                ->message("üå§ –ü—Ä–∏–≤–µ—Ç! *{$nameUser}* –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç! —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
                ->keyboard(Keyboard::make()->row([
                    Button::make('–ü–æ–≥–æ–¥–∞')->action('weather')->param('weather', 1),
                    Button::make('–ö—É—Ä—Å –≤–∞–ª—é—Ç')->action('currency')->param('step', 1),
                ]))->send();
            Log::info('Message sent successfully!');
        } catch (\Exception $e) {
            Log::error('Error while sending message: ' . $e->getMessage());
        }
    }

    /**
     * @return void
     */
    public function currency(): void
    {
        $step = $this->data->get('step');
        $from = $this->data->get('from') ?? '';
        $to = $this->data->get('to') ?? '';
        switch ($step) {
            case 1:
                $this->currency->getCurrency($this->chat, $this->callbackQuery);
                break;
            case 2:
                $this->currency->exchange($this->chat, $this->callbackQuery, $from);
                break;
            case 3:
                $this->currency->exchangeTo($this->chat, $this->callbackQuery, $from, $to);
                break;
        }
    }

    /**
     * @return void
     */
    public function weather(): void
    {
        Cache::put("weather-{$this->chat->chat_id}", [
            'controller' => 'weather'
        ], now()->addMinutes(10));
        $this->weather->startWeather($this->chat);
    }

    /**
     * @return void
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function getWeather(): void
    {
        $params = [
            'city' => $this->data->get('city') ?? '',
            'api' => $this->data->get('api') ?? ''
        ];
        if ($params['api'] == 'weather') {
            $this->weather->today($params, $this->chat);
        }
        $this->weather->week($params, $this->chat);

    }


    protected function handleChatMessage(Stringable $message): void
    {
        $chatId = $this->chat->chat_id;
        $dataFromCurrency = Cache::get("exchange-{$this->chat->chat_id}");
        $dataFromWeatherSubs = Cache::get("weather_subs-{$this->chat->chat_id}");
        $dataFromWeather = Cache::get("weather-{$this->chat->chat_id}");
        if (!empty($dataFromCurrency)) {
            if (!is_numeric($message->value())) {
                $this->reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ');
                return;
            }
            $result = $this->currency->getDataFromBank();
            $response = '';
            foreach ($result as $key => $item) {
                if (in_array($dataFromCurrency['from'], $item) && in_array($dataFromCurrency['to'], $item)) {
                    if ($item[0] == $dataFromCurrency['from']) {
                        $response = $message->value() * $item['buy'];
                    }
                    if ($item[1] == $dataFromCurrency['from']) {
                        $value = str_replace(',', '', $message->value());
                        $response = round($value / $item['sell'], 2);
                    }
                }
            }
            $this->reply("{$message->value()} *{$dataFromCurrency['from']}* —Ä–æ–≤–Ω—è–µ—Ç—Å—è {$response} *{$dataFromCurrency['to']}*");
        } else if (!empty($dataFromWeather)) {
            try {
                $weatherData = $this->weather->getDefaultWeatherResult($message->value());
                if ($weatherData == null) {
                    $this->reply('–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
                    return;
                }
                Telegraph::bot($this->botToken)->chat($this->chat->chat_id)
                    ->message("‚ùì –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: \n‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è \n üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é \n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å! üëá")
                    ->keyboard(Keyboard::make()->row([
                        Button::make('–ù–∞ —Å–µ–≥–æ–¥–Ω—è')->action('getWeather')->param('city', $message->value())->param('api', 'weather'),
                        Button::make('–ù–∞ 5 –¥–Ω–µ–π')->action('getWeather')->param('city', $message->value())->param('api', 'forecast')
                    ]))->send();
            } catch (\Exception $e) {
                Log::error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≥–æ–¥—ã: ' . $e->getMessage(), ['trace' => $e->getTraceAsString()]);
                $this->reply("–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }
        }
    }

    /**
     * @return void
     */
    public function weather_subs(): void
    {
        $customer = $this->message->from();
        $keyBoard = ReplyKeyboard::make();

        Telegraph::bot($this->botToken)->chat($this->chat->chat_id)
            ->message('–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è, –≤—ã–±–µ—Ä–∏')
            ->replyKeyboard($keyBoard
                ->row([
                    ReplyButton::make('7:00'),
                    ReplyButton::make('7:30'),
                    ReplyButton::make('8:00'),
                    ReplyButton::make('8:30'),
                ])->row([
                    ReplyButton::make('9:00'),
                    ReplyButton::make('9:30'),
                    ReplyButton::make('10:00'),
                    ReplyButton::make('10:30'),
                ])
                ->row([
                    ReplyButton::make('11:00'),
                    ReplyButton::make('11:30'),
                    ReplyButton::make('12:00'),
                    ReplyButton::make('12:30'),
                ])->row([
                    ReplyButton::make('13:00'),
                    ReplyButton::make('13:30'),
                    ReplyButton::make('14:00'),
                    ReplyButton::make('14:30'),
                ])
                ->row([
                    ReplyButton::make('15:00'),
                    ReplyButton::make('15:30'),
                    ReplyButton::make('16:00'),
                    ReplyButton::make('16:30'),
                ])->row([
                    ReplyButton::make('17:00'),
                    ReplyButton::make('17:30'),
                    ReplyButton::make('18:00'),
                    ReplyButton::make('18:30'),
                ])
                ->row([
                    ReplyButton::make('19:00'),
                    ReplyButton::make('19:30'),
                    ReplyButton::make('20:00'),
                    ReplyButton::make('20:30'),
                ])
            )
            ->send();
        Cache::put('weather_subs-' . $this->chat->chat_id, [
            'idCustomer' => $customer->id(),
            'name' => $customer->username(),
        ], now()->addHours(1));
    }

    public function help(): void
    {
        $helpText = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å:\n\n";
        $helpText .= "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n";
        $helpText .= "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É!\n\n";
        $helpText .= "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n";
        $helpText .= "1. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n";
        $helpText .= "2. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π.\n\n";
        $helpText .= "–ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏ *–ú–æ—Å–∫–≤–∞* –∏ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\n";
        $helpText .= "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!";

        $this->reply($helpText);
    }

    public function handleUnknownCommand(Stringable $text): void
    {
        if ($text->value() !== '/start' || $text->value() !== '/help') {
            $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        }
    }

}
